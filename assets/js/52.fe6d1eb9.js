(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{385:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"协程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程"}},[t._v("#")]),t._v(" 协程")]),t._v(" "),s("blockquote",[s("p",[t._v("要想了解协程，最好先搞清楚进程，线程，这样才能将三者区分开来！")])]),t._v(" "),s("h1",{attrs:{id:"_1-进程和线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程和线程"}},[t._v("#")]),t._v(" 1.进程和线程")]),t._v(" "),s("h2",{attrs:{id:"_1-1-进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-进程"}},[t._v("#")]),t._v(" 1.1 进程")]),t._v(" "),s("p",[t._v("进程，直观点说，保存在硬盘上的程序运行以后，会在内存空间里形成一个独立的内存体，这个内存体 "),s("strong",[t._v("有自己独立的地址空间，有自己的堆")]),t._v(" ，上级挂靠单位是操作系统。 "),s("strong",[t._v("操作系统会以进程为单位，分配系统资源（CPU时间片、内存等资源），进程是资源分配的最小单位")]),t._v(" 。")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/xiaose-code/Pictures@main/img/1703753563239.webp",alt:"1703753563239"}}),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/xiaose-code/Pictures@main/img/1703753837267.webp",alt:"1703753837267"}}),t._v(" "),s("p",[t._v("【进程间通信（IPC）】：")]),t._v(" "),s("ul",[s("li",[t._v("管道(Pipe)、命名管道(FIFO)、消息队列(Message Queue) 、信号量(Semaphore) 、共享内存（Shared Memory）；套接字（Socket）。")])]),t._v(" "),s("h2",{attrs:{id:"_1-2-线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-线程"}},[t._v("#")]),t._v(" 1.2 线程")]),t._v(" "),s("p",[s("strong",[t._v("线程，有时被称为轻量级进程(Lightweight Process，LWP），是操作系统调度（CPU调度）执行的最小单位")]),t._v("。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"1703753887767","data-src":"https://cdn.jsdelivr.net/gh/xiaose-code/Pictures@main/img/1703753887767.webp",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"_1-3-进程和线程的区别和联系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-进程和线程的区别和联系"}},[t._v("#")]),t._v(" 1.3 进程和线程的区别和联系")]),t._v(" "),s("h3",{attrs:{id:"_1-3-1-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-区别"}},[t._v("#")]),t._v(" 1.3.1 区别")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("调度：")]),t._v(" 线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；")]),t._v(" "),s("li",[s("strong",[t._v("并发性：")]),t._v(" 不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；")]),t._v(" "),s("li",[s("strong",[t._v("拥有资源：")]),t._v(" 进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。进程所维护的是程序所包含的资源（静态资源）， 如：地址空间，打开的文件句柄集，文件系统状态，信号处理 handler 等；线程所维护的运行相关的资源（动态资源），如：运行栈，调度相关的控制信息，待处理的信号集等；")]),t._v(" "),s("li",[s("strong",[t._v("系统开销：")]),t._v(" 在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-2-联系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-联系"}},[t._v("#")]),t._v(" 1.3.2 联系：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程")]),t._v("；")]),t._v(" "),s("li",[t._v("资源分配给进程，同一进程的所有线程共享该进程的所有资源；")]),t._v(" "),s("li",[t._v("处理机分给线程，即"),s("strong",[t._v("真正在处理机上运行的是线程")]),t._v("；")]),t._v(" "),s("li",[t._v("线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-3-举例说明进程和线程区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-举例说明进程和线程区别"}},[t._v("#")]),t._v(" 1.3.3 举例说明进程和线程区别")]),t._v(" "),s("p",[t._v("假如我们把整条道路看成是一个 “进程” 的话，那么由白色虚线分隔开来的各个车道就是进程中的各个 “线程” 了。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("这些 "),s("strong",[t._v("线程(车道)")]),t._v(" 共享了 "),s("strong",[t._v("进程(道路)")]),t._v(" 的公共资源(土地资源)。")])]),t._v(" "),s("li",[s("p",[t._v("这些 "),s("strong",[t._v("线程(车道)")]),t._v(" 必须依赖于 "),s("strong",[t._v("进程(道路)")]),t._v(" ，也就是说，线程不能脱离于进程而存在(就像离开了道路，车道也就没有意义了)。")])]),t._v(" "),s("li",[s("p",[t._v("这些 "),s("strong",[t._v("线程(车道)")]),t._v(" 之间可以 "),s("strong",[t._v("并发执行(各个车道你走你的，我走我的)")]),t._v(" ，也可以 "),s("strong",[t._v("互相同步(某些车道在交通灯亮时禁止继续前行或转弯，必须等待其它车道的车辆通行完毕)")]),t._v(" 。")])]),t._v(" "),s("li",[s("p",[t._v("这些 "),s("strong",[t._v("线程(车道)")]),t._v(" 之间依靠 "),s("strong",[t._v("代码逻辑(交通灯)")]),t._v(" 来控制运行，一旦 "),s("strong",[t._v("代码逻辑控制有误(死锁，多个线程同时竞争唯一资源)")]),t._v(" ，那么线程将陷入混乱，无序之中。")])])]),t._v(" "),s("h2",{attrs:{id:"_1-4-进程-线程之间的亲缘性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-进程-线程之间的亲缘性"}},[t._v("#")]),t._v(" 1.4 进程/线程之间的亲缘性")]),t._v(" "),s("p",[s("strong",[t._v("亲缘性的意思是进程/线程只在某个 CPU 上运行（多核系统）")]),t._v("，比如：")]),t._v(" "),s("div",{staticClass:"language-CPP line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("BOOL WINAPI "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetProcessAffinityMask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  _In_ HANDLE    hProcess"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  _In_ DWORD_PTR dwProcessAffinityMask\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\ndwProcessAffinityMask 如果是 0 , 代表当前进程只在 cpu0 上工作;\n如果是 0x03 , 转为2进制是 00000011 . 代表只在 cpu0 或 cpu1 上工作;\n*/")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[s("strong",[t._v("使用CPU亲缘性的好处：")])]),t._v(" "),s("p",[s("strong",[t._v("设置CPU亲缘性是为了防止进程/线程在CPU的核上频繁切换")]),t._v(" ，从而 "),s("strong",[t._v("避免因切换带来的CPU的L1/L2 cache失效")]),t._v(" ，cache 失效会降低程序的性能。")]),t._v(" "),s("h1",{attrs:{id:"_2-协程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-协程"}},[t._v("#")]),t._v(" 2.协程")]),t._v(" "),s("blockquote",[s("p",[t._v("概要速览：")]),t._v(" "),s("p",[t._v("协程（coroutine）是一种在程序设计中用于实现多任务并发执行的技术。它允许在单个线程内进行多个任务之间的切换，这种切换是协作式的，即任务主动让出控制权，而不是抢占式的。协程的概念最早可以追溯到1958年，由马尔文·康威（Marvin Conway）提出，并在1963年首次公开发表。")]),t._v(" "),s("p",[t._v("在程序中，协程通常通过函数或方法的暂停和恢复来实现。一个协程函数可以在执行到某个点时暂停，将控制权让给其他的协程函数，并在适当的时候恢复执行。这种机制使得一个线程可以在等待某些操作（如I/O）完成时切换到其他任务，从而提高资源的利用率。")]),t._v(" "),s("p",[t._v("协程的实现通常依赖于事件循环（event loop）或类似的机制，用于调度和管理协程的执行。在许多编程语言中，协程已经成为并发编程的标准库部分，如Python中的asyncio模块、Go语言中的协程以及Kotlin中的协程支持。")]),t._v(" "),s("p",[t._v("协程的使用场景非常广泛，包括但不限于：")]),t._v(" "),s("ul",[s("li",[t._v("异步I/O操作：在网络请求或文件操作中，协程可以在等待I/O完成时执行其他任务。")]),t._v(" "),s("li",[t._v("并发任务调度：在图形用户界面（GUI）应用程序中，协程可以实现平滑的用户界面响应，同时处理后台任务。")]),t._v(" "),s("li",[t._v("协程异常处理：协程支持异常的传播和捕获，允许在协程结构中传播异常信息。")])]),t._v(" "),s("p",[t._v("协程的一个重要特性是它们可以携带状态，这意味着当协程被挂起时，它当前的状态（包括局部变量和程序计数器等）会被保存，并在恢复执行时恢复到挂起前的状态。")]),t._v(" "),s("p",[t._v("在不同的编程语言和平台中，协程的实现和调度机制可能有所不同，但其核心概念和目的是相似的：通过协作式的多任务并发执行，提高程序的性能和响应能力。")])]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"1703754500862","data-src":"https://cdn.jsdelivr.net/gh/xiaose-code/Pictures@main/img/1703754500862.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("协程，是一种比线程更加轻量级的存在，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。")]),t._v(" "),s("p",[t._v("子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。所以子程序调用是通过栈实现的，"),s("strong",[t._v("一个线程就是执行一个子程序")]),t._v("。子程序调用总是一个入口，一次返回，调用顺序是明确的。而协程的调用和子程序不同。")]),t._v(" "),s("p",[s("strong",[t._v("协程在子程序内部是可中断的，然后转而执行别的子程序，在适当的时候再返回来接着执行")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-CPP line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("def "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'1'")]),t._v("\n    print "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'2'")]),t._v("\n    print "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'3'")]),t._v("\n\ndef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    print "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'x'")]),t._v("\n    print "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'y'")]),t._v("\n    print "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'z'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("假设由协程执行，在执行A的过程中，可以随时中断，去执行B，B也可能在执行过程中中断再去执行A，结果可能是："),s("code",[t._v("1 2 x y 3 z")]),t._v("。")]),t._v(" "),s("p",[t._v("协程的特点在于是一个线程执行，那和多线程比，协程有何优势？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("极高的执行效率：因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显；")])]),t._v(" "),s("li",[s("p",[t._v("不需要多线程的锁机制：因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。")])])]),t._v(" "),s("h1",{attrs:{id:"_3-c-20-协程原理和应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-c-20-协程原理和应用"}},[t._v("#")]),t._v(" 3.C++20 协程原理和应用")]),t._v(" "),s("p",[s("strong",[t._v("协程可分为两种：")])]),t._v(" "),s("ul",[s("li",[t._v("无栈协程：即可挂起/恢复的函数，无栈协程切换的成本相当于函数调用的成本。")]),t._v(" "),s("li",[t._v("有栈协程：即相当于用户态线程，有栈协程切换的成本是用户态线程切换的成本。")])]),t._v(" "),s("p",[s("strong",[t._v("无栈协程和线程的区别：")])]),t._v(" "),s("ul",[s("li",[t._v("无栈协程只能被线程调用，本身并不抢占内核调度，而线程则可抢占内核调度。")])]),t._v(" "),s("blockquote",[s("p",[t._v("C++20 协程中采纳的是微软提出并主导（源于C#）的无栈协程。")]),t._v(" "),s("p",[t._v("C++世界演化的主旋律：异步化和并行化，而 C++20 协程能够以同步原语写异步代码的特性，使其成为编写异步代码的好工具。")])]),t._v(" "),s("h2",{attrs:{id:"_3-1-举例展示一下协程的-妙处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-举例展示一下协程的-妙处"}},[t._v("#")]),t._v(" 3.1 举例展示一下协程的 “妙处”")]),t._v(" "),s("h3",{attrs:{id:"基于回调的异步-client-的伪代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于回调的异步-client-的伪代码"}},[t._v("#")]),t._v(" 基于回调的异步 client 的伪代码")]),t._v(" "),s("div",{staticClass:"language-CPP line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" endpoint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endpoint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" error_code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_handle_shake")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" error_code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        send_data_ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("send_data_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" error_code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" error_code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finished")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append_response")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("recieve_data_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"finished ok\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[t._v("基于异步回调的 client 流程如下：")]),t._v(" "),s("ul",[s("li",[t._v("异步域名解析")]),t._v(" "),s("li",[t._v("异步连接")]),t._v(" "),s("li",[t._v("异步 SSL 握手")]),t._v(" "),s("li",[t._v("异步发送数据")]),t._v(" "),s("li",[t._v("异步接收数据")])]),t._v(" "),s("p",[t._v("这个代码有很多回调函数，使用回调的时候还有一些陷阱，比如如何保证安全的回调、如何让异步读实现异步递归调用，如果再结合异步业务逻辑，回调的嵌套层次会更深，我们已经看到 callback hell 的影子了！可能也有读者觉得这个程度的异步回调还可以接受，但是如果工程变大，业务逻辑变得更加复杂，回调层次越来越深，维护起来就很困难了。")]),t._v(" "),s("p",[t._v("再来看看用协程是怎么写这个代码的：")]),t._v(" "),s("h3",{attrs:{id:"基于-c-20-协程的异步-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于-c-20-协程的异步-client"}},[t._v("#")]),t._v(" 基于 C++20 协程的异步 client")]),t._v(" "),s("div",{staticClass:"language-CPP line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" endpoint "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("co_await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" error_code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("co_await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endpoint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nerror_code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("co_await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_handle_shake")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsend_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nerror_code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("co_await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("send_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("co_await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("async_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finished")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"finished ok\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append_response")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("recieve_data_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("同样是异步 client，相比回调模式的异步 client，整个代码非常清爽，简单易懂，同时保持了异步的高性能，这就是 C++20 协程的威力！")]),t._v(" "),s("h2",{attrs:{id:"_3-2-c-20-为什么选择无栈协程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-c-20-为什么选择无栈协程"}},[t._v("#")]),t._v(" 3.2 C++20 为什么选择无栈协程？")]),t._v(" "),s("p",[t._v("有栈（stackful）协程通常的实现手段是在堆上提前分配一块较大的内存空间（比如 64K），也就是协程所谓的“栈”，参数、return address 等都可以存放在这个“栈”空间上。如果需要协程切换，那么通过 swapcontext 一类的形式来让系统认为这个堆上空间就是普通的栈，这就实现了上下文的切换。")]),t._v(" "),s("blockquote",[s("p",[t._v("有栈协程最大的优势就是侵入性小，使用起来非常简便，已有的业务代码几乎不需要做什么修改，但是 C++20 最终还是选择了使用无栈协程，主要出于下面这几个方面的考虑。")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("栈空间的限制：")])]),t._v(" "),s("p",[t._v("有栈协程的“栈”空间普遍是比较小的，在使用中有栈溢出的风险；而如果让“栈”空间变得很大，对内存空间又是很大的浪费。无栈协程则没有这些限制，既没有溢出的风险，也无需担心内存利用率的问题。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("性能：")])]),t._v(" "),s("p",[t._v("有栈协程在切换时确实比系统线程要轻量，但是和无栈协程相比仍然是偏重的，这一点虽然在我们目前的实际使用中影响没有那么大（异步系统的使用通常伴随了 IO，相比于切换开销多了几个数量级），但也决定了无栈协程可以用在一些更有意思的场景上。")])])]),t._v(" "),s("h2",{attrs:{id:"_3-3-无栈协程是普通函数的泛化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-无栈协程是普通函数的泛化"}},[t._v("#")]),t._v(" 3.3 无栈协程是普通函数的泛化")]),t._v(" "),s("blockquote",[s("p",[t._v("无栈协程是一个可以暂停和恢复的函数，是函数调用的泛化。")])]),t._v(" "),s("p",[t._v("一个函数的函数体(function body)是顺序执行的，执行完之后将结果返回给调用者，我们没办法挂起它并稍后恢复它，只能等待它结束。而无栈协程则允许我们把函数挂起，然后在任意需要的时刻去恢复并执行函数体，相比普通函数，协程的函数体可以挂起并在任意时刻恢复执行。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"1704702916926","data-src":"https://cdn.jsdelivr.net/gh/xiaose-code/Pictures@main/img/1704702916926.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("所以，从这个角度来说，无栈协程是普通函数的泛化。")]),t._v(" "),s("h2",{attrs:{id:"_3-4-c-20-协程的三个关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-c-20-协程的三个关键字"}},[t._v("#")]),t._v(" 3.4 C++20 协程的三个关键字")]),t._v(" "),s("p",[t._v("C++20 提供了三个新关键字(co_await、co_yield 和 co_return)，如果一个函数中存在这三个关键字之一，那么它就是一个协程。")]),t._v(" "),s("h3",{attrs:{id:"协程相关的对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程相关的对象"}},[t._v("#")]),t._v(" 协程相关的对象")]),t._v(" "),s("h4",{attrs:{id:"协程帧-coroutine-frame"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程帧-coroutine-frame"}},[t._v("#")]),t._v(" 协程帧(coroutine frame)")]),t._v(" "),s("p",[t._v("当 caller 调用一个协程的时候会先创建一个协程帧，协程帧会构建 promise 对象，再通过 promise 对象产生 return object。")]),t._v(" "),s("p",[s("strong",[t._v("协程帧中主要有这些内容：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("协程参数")])]),t._v(" "),s("li",[s("p",[t._v("局部变量")])]),t._v(" "),s("li",[s("p",[t._v("promise 对象")])])]),t._v(" "),s("h4",{attrs:{id:"promise-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise-type"}},[t._v("#")]),t._v(" promise_type")]),t._v(" "),s("p",[t._v("promise_type 是 promise 对象的类型。promise_type 用于定义一类协程的行为，包括协程创建方式、协程初始化完成和结束时的行为、发生异常时的行为、如何生成 awaiter 的行为以及 co_return 的行为等等。promise 对象可以用于记录/存储一个协程实例的状态。每个协程桢与每个 promise 对象以及每个协程实例是一一对应的。")]),t._v(" "),s("h4",{attrs:{id:"coroutine-return-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#coroutine-return-object"}},[t._v("#")]),t._v(" coroutine return object")]),t._v(" "),s("p",[t._v("它是 promise.get_return_object() 方法创建的，一种常见的实现手法会将 coroutine_handle 存储到 coroutine object 内，使得该 return object 获得访问协程的能力。")]),t._v(" "),s("h4",{attrs:{id:"std-coroutine-handle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#std-coroutine-handle"}},[t._v("#")]),t._v(" std::coroutine_handle")]),t._v(" "),s("p",[t._v("协程帧的句柄，主要用于访问底层的协程帧、恢复协程和释放协程帧。\n程序员可通过调用 std::coroutine_handle::resume() 唤醒协程。")]),t._v(" "),s("h4",{attrs:{id:"co-await、awaiter、awaitable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#co-await、awaiter、awaitable"}},[t._v("#")]),t._v(" co_await、awaiter、awaitable")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("co_await：一元操作符；")])]),t._v(" "),s("li",[s("p",[t._v("awaitable：支持 co_await 操作符的类型；")])]),t._v(" "),s("li",[s("p",[t._v("awaiter：定义了 await_ready、await_suspend 和 await_resume 方法的类型。")])])]),t._v(" "),s("p",[t._v("co_await expr 通常用于表示等待一个任务(可能是 lazy 的，也可能不是)完成。co_await expr 时，expr 的类型需要是一个 awaitable，而该 co_await 表达式的具体语义取决于根据该 awaitable 生成的 awaiter。")]),t._v(" "),s("p",[t._v("看起来和协程相关的对象还不少，这正是协程复杂又灵活的地方，可以借助这些对象来实现对协程的完全控制，实现任何想法。但是，需要先要了解这些对象是如何协作的，把这个搞清楚了，协程的原理就掌握了，写协程应用也会游刃有余了。")]),t._v(" "),s("p",[t._v("文章参考：")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/tennysonsky/article/details/46046317")]),t._v(" "),s("p",[t._v("https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868328689835ecd883d910145dfa8227b539725e5ed000")]),t._v(" "),s("p",[t._v("https://www.cnblogs.com/work115/p/5620272.html")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/liu251890347/article/details/38509943")]),t._v(" "),s("p",[t._v("https://www.cnblogs.com/fah936861121/articles/8043187.html")]),t._v(" "),s("p",[t._v("http://blog.chinaunix.net/uid-25601623-id-5095687.html")]),t._v(" "),s("p",[t._v("http://t.csdnimg.cn/RolRj")]),t._v(" "),s("p",[t._v("http://t.csdnimg.cn/s6wn0")])])}),[],!1,null,null,null);s.default=e.exports}}]);